#!/bin/bash

# Add vars to your .bashrc or .bash_profile to use the online syncronization

#export PASSDOG_REPO="git@github.com:CarlosTaborda/credentials.git"
#export PASSDOG_REPOKEYPATH="/home/ubuntu_felipe/.ssh/id_github"

keychain_exists () {
    if [ -d ~/.passdog ]
    then
        echo 1
    else
        echo 0
    fi
}

keychain_decrypt () {
   

    exists="$(keychain_exists)"

    if [ "$exists" = "0" ]
    then
        return 0
    fi

    passwords_stored="$(gpg --pinentry-mode=loopback --passphrase "$1" -d ~/.passdog/passdogstore.csv)"

    if [ $? -eq 0 ]
    then
        echo "${passwords_stored}"
    else
        echo "0"
    fi
}

export_keychain(){
    cd ~
    zip -r ~/passdog.zip .passdog
    cd -
    mv ~/passdog.zip "$1/passdog$(date '+%Y%m%d_%I%M%P').zip"
    echo "keychain exported to: $1/passdog$(date '+%Y%m%d_%I%M%P').zip"
}

import_keychain(){
    files=(ls $1/passdog*)
    cp -i "${files[-1]}" ~/.passdog.zip
    unzip ~/.passdog.zip -d ~/tmpFolderPassdog
    mv -i ~/tmpFolderPassdog/.passdog ~/.passdog
    rm -r ~/tmpFolderPassdog
    echo "---------->${files[-1]} imported successfull"
    rm -v $1/passdog*
    rm -v ~/.passdog.zip
}    


generate_password () {

    password="$(date | md5sum)"
    password=`echo ${password:0:$1}`
    echo "$password"

}


sync_keychain () {
    echo "-- synchronizing keychain --"

    if [ -d ~/.passdog/ ] && [ -d ~/.passdog/.git ]
    then
        if [[ `git -C ~/.passdog status --porcelain` ]]
        then
            git -C ~/.passdog branch -M main
            git -C ~/.passdog add .
            git -C ~/.passdog commit -m "sync"
            if [ -n "${PASSDOG_REPO}" ] && [ -n "${PASSDOG_REPOKEYPATH}" ]
            then
                eval $(ssh-agent -s)
                ssh-add ${PASSDOG_REPOKEYPATH}
                git -C ~/.passdog remote set-url origin ${PASSDOG_REPO}
                git -C ~/.passdog push -f origin main
            fi
        else
            if [ -n "${PASSDOG_REPO}" ] && [ -n "${PASSDOG_REPOKEYPATH}" ]
            then
                eval $(ssh-agent -s)
                ssh-add ${PASSDOG_REPOKEYPATH}
                git -C ~/.passdog pull
            fi
        fi
    else
        
        if [ -n "${PASSDOG_REPO}" ] && [ -n "${PASSDOG_REPOKEYPATH}" ]
        then
            eval $(ssh-agent -s)
            ssh-add ${PASSDOG_REPOKEYPATH}
            git clone ${PASSDOG_REPO}  ~/.passdog
        else
            mkdir ~/.passdog
            touch ~/.passdog/passdogstore.csv
            echo "CATEGORY, USER, PASSWORD, COMMENT" >> ~/.passdog/passdogstore.csv
            git -C ~/.passdog init
            git -C ~/.passdog add .
            git -C ~/.passdog commit -m "initial commit"
            git -C ~/.passdog branch -M main
        fi

    fi
}


init_store () {
    if [ "$(keychain_exists)" = "0" ]
    then
        
        

        echo "Type your Password:"
        read -s password

        echo "Confirm you Password:"
        read -s password_conf

        if [ ! "${password}" == "${password_conf}" ]
        then
            >&2 echo -e "\n----> The password aren't equals"
            exit 1
        fi

        sync_keychain

        passwords_stored="$(keychain_decrypt $password)"
        if [ "0" = "${passwords_stored}" ];
        then
            gpg --pinentry-mode=loopback --passphrase "$password" -c --no-symkey-cache ~/.passdog/passdogstore.csv
            rm -r ~/.passdog/passdogstore.csv
            mv ~/.passdog/passdogstore.csv.gpg ~/.passdog/passdogstore.csv
        fi

        

        
        if [ "$(keychain_exists)" = "0" ]
        then
            >&2 echo -e "\n----> Could not be create keychain storage"
        else
            >&2 echo -e "\n----> Keychain storage created"
        fi

    else
        echo -e "\n----> The Keychain storage already exists '~/.passdog/passdogstore.csv'"
    fi
}

add_credential () {

    passwords_stored="_"
    passwords_stored="$(keychain_decrypt $1)"

    if [ "$(keychain_exists)" = 0 ]
    then
        >&2 echo -e "\n----> Keychain doesn't exists"
        usage
        exit 0
    fi

    if [ "0" = "${passwords_stored}" ];
    then
        >&2 echo -e "\n----> Could not access to keychain storage"
        exit 1
    fi

    rm -r ~/.passdog/passdogstore.csv
    echo ""
    echo ""
    echo "-- ADD CREDENTIAL --"
    echo ""

    category=""
    user=""
    password=""
    comment=""

    read -p "CATEGORY:" category
    read -p "USER:" user
    read -p "PASSWORD:" password
    read -p "COMMENT:" comment


    passwords_stored="$( echo -e "${passwords_stored}\nCATEGORY: $category, $user, $password, $comment" )"
    echo "${passwords_stored}" | gpg --pinentry-mode=loopback --passphrase "$1" -c --no-symkey-cache -o ~/.passdog/passdogstore.csv

    sync_keychain
    
    echo -e "\n----> Credential added"
}


edit_passwords () {


    if [ "$(keychain_exists)" = "0" ]
    then
        >&2 echo -e "\n----> Keychain storage doesn't exists"
        exit 1
    fi

    passwords_stored="$(keychain_decrypt $1)"

    if [ "${passwords_stored}" != "0" ]
    then
        file="/tmp/$(generate_password 10).csv"
        echo "${passwords_stored}"> $file
        if [ -n "$2" ]
        then
            credential=$(sed $2!d $file)
            IFS=','
            echo -e "\n\n"
            read -a strarr <<<"$credential"
            read -p "CATEGORY [${strarr[0]}]: " category
            read -p "USER [${strarr[1]}]: " user
            read -p "PASSWORD [${strarr[2]}]: " password
            read -p "COMMENT [${strarr[3]}]: " comment
            echo -e "\n"
            if [ -z "${category}" ]
            then
                category="${strarr[0]}"
            fi
            if ! [[ $string == *"CATEGORY:"* ]]; then
                category="CATEGORY: $category"
            fi
            if [ -z "${user}" ]
            then
                user="${strarr[1]}"
            fi
            if [ -z "${password}" ]
            then
                password="${strarr[2]}"
            fi
            if [ -z "${comment}" ]
            then
                comment="${strarr[3]}"
            fi
            modifiedcred="$category, $user, $password, $comment"
            modifiedfile=$(sed "$2 c\
            $modifiedcred" $file)
            echo "${modifiedfile}" > $file 
        else
            
            vim -u NONE $file
            
        fi
        passwords_stored="$(cat $file)"
        rm ~/.passdog/passdogstore.csv
        echo "${passwords_stored}" | gpg --pinentry-mode=loopback --passphrase "$1" -c --no-symkey-cache -o ~/.passdog/passdogstore.csv
        rm $file
        sync_keychain
        echo -e "\n----> Keychain storage edited successfull"
        
    else
        >&2 echo -e "\n----> Could not access to keychain"
        exit 1
    fi
} 

delete_credential () {
    
    if [ "$( keychain_exists )" = "0" ]
    then
        >&2 echo -e "\n----> Keychain doesn't exists"
        exit 1
    fi

    passwords_stored="$(keychain_decrypt $1)"

    if [ "${passwords_stored}" != "0" ]
    then
        rm -r ~/.passdog/passdogstore.csv
        echo "${passwords_stored}" | sed $2d | gpg --pinentry-mode=loopback --passphrase "$1" -c --no-symkey-cache -o ~/.passdog/passdogstore.csv
        sync_keychain
        echo -e "\n---->The line $2 has been deleted."

    else
        >&2 echo -e "\n----> The password isn't correct"
        exit 1
    fi

}

list_all () {

    if [ "$(keychain_exists)" = 0 ]
    then
        >&2 echo -e "\n----> Keychain doesn't exists"
        usage
        exit 0
    fi

    passwords_stored="$(keychain_decrypt $1)"
    if [ "0" != "${passwords_stored}" ]
    then
        sync_keychain
        echo -e "\n"
        echo -e "${passwords_stored}" | nl -w2 -s'- ' | column -s , -t
    else
        >&2 echo -e "\n----> Could access to keychain storage"
    fi
}

search_credential () {
    
    if [ $(keychain_exists) = "1" ]
    then
        passwords_stored="$( keychain_decrypt $1)"
        if [ "${passwords_stored}" != "0" ]
        then
            sync_keychain
            echo -e "\n"
            echo "${passwords_stored}" | grep -in --color=always "$2" | column -s , -t 
        else
            >&2 echo -e "\n ----> The password isn't correct"
        fi
    else
        >&2 echo "\n----> Keychain doesn't exists"
        usage
        exit
    fi
    
}


remove_keychain () {

    passwords_stored="$(keychain_decrypt $1)"

    if [ "$( keychain_exists )" = "0" ]
    then
        >&2 echo -e "\n----> The keychain storage doesn't exists"
        exit 1
    fi

    if [ "${passwords_stored}" = "0" ]
    then
        >&2 echo -e "\n----> The password isn't correct"
        exit 1
    else

        echo  -e  "\n\nAre you sure to delete keychain? y:yes n:not"
        read answer

        if [ "$answer" = "y" ] || [ "$answer" = "yes" ];
        then
            rm -rv ~/.passdog/
            echo -e "\n----> Keychain storage deleted"
        else
            echo -e "\n----> Keychain storage not deleted"
        fi

    fi
}

usage () {
    usage_command=" 
    The 'passdog' command is a simple keychain cli utility
    USAGE: passdog option [param]\n
    OPTIONS
    -i  
        for initialize the keychain
    -pc \"category user pass\" 
        for add a credential to keychain

    -g lenght
        gerate a random password with the lenght spicified
    -pl 
        for list all credentials
    -ps \"search_term\" 
        for search a credential
    -pr for delete keychain
    -pd credential_number 
        for delete credential to get credential_number you 
        could use first the -ps option to get the credential_number
    -pE 
        Edit all passwords with VIM editor 
    -pe [linenumber]
        Edit a passwords in the spicified line
    -x  
        Export the keychan file to path indicated ex: passdog -x [path]
    -z  
        Import the keychan file to path indicated ex: passdog -z [path] (path not contain file name)


    This tool require the packages vim, gpg, column, sed, grep
    "
    echo -e "${usage_command}"
}


if [ $# -eq 0 ]
  then
    echo "No arguments supplied:"
    echo "passdog -h to see options"
fi



while getopts "pEcide:g:lrs:x:z:" o;
   do
   case "${o}" in 
       p)
           echo "Password:"
           read -s password
           ;;
       i)
           init_store
           ;;
       c) 
           add_credential $password 
           ;;
       d)
           line=${OPTARG}
           delete_credential $password $line
           ;;
       e) 
           line=${OPTARG}
           edit_passwords $password $line
           ;;
       E) 
           edit_passwords $password
           ;;
       g) 
           len=${OPTARG}
      	   generate_password $len
	        ;;
       l) 
           list_all $password 
           ;;
       r)
           remove_keychain $password
           ;;
       s)
           search=${OPTARG}
           search_credential $password "$search"
           ;;
       x) 
           export_path=${OPTARG}
           export_keychain $export_path
           ;;
       z) 
           import_path=${OPTARG}
           import_keychain $import_path
           ;;

       \? |* ) 
           usage
           exit 0
           ;;

   esac
done 

